// Solution (MM 2020).cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
using namespace std;
int x,y,sum=0, c = 0, N;

void genZero()
{
    /*Function who print tupe string of the gaming table (OOP)*/
    /*Game example 1!*/
    for (int hor=0; hor < x; hor++) {

        for (int col=0; col < y; col++) {
            if (hor % 2 == 0) {
                cout << "0";
            }
            else { cout << "1" ; }
        }    
        cout << endl;
    }
    cout << endl;
}

int genNext() {
    /*Function for next generations(OOP)*/
    int array[100][100];
    int array2[100][100];
    for (int ii = 0; ii < x; ii++)
    {
        for (int jj = 0; jj < y; jj++)
        {
            /*Starting pattern*/
            if (ii % 2 == 0) {
                array[ii][jj] = { 0 };
                array2[ii][jj] = { 0 };
            }
            /*I change number "1" with "2" to remove problem with "true=1"*/
            else {
                array[ii][jj] = { 2 }; array2[ii][jj] = { 2 };
            }
        }
    }
    int proba = 0;
    for (int gener = 0; gener < N; gener++)
    {
        for (int i = 0; i < x; i++)
        {
            for (int j = 0; j < y; j++)
            {
                /*  cout << array[i][j];
                  if (j == (y-1)) {
                           cout << endl;
                  }*/

                  /*Generation rules*/
                proba = 0;
                /*Rule-1*/
                if (array2[i][j] == 0) {
                    /*cross*/
                       //if ((i - 1) >= 0 && (j - 1) >= 0 && (j + 1) <= (1 - y) && (i + 1) <= (x - 1)) {
                    if (array2[i - 1][j] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j] == 2) {
                        proba++;
                    }
                    if (array2[i][j - 1] == 2) {
                        proba++;
                    }
                    if (array2[i][j + 1] == 2) {
                        proba++;
                    }
                    /*diag*/
                    if (array2[i - 1][j - 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j - 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i - 1][j + 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j + 1] == 2)
                    {
                        proba++;
                    }
                    /*final*/
                    if (proba == 3 || proba == 6) {
                        array[i][j] = 2;
                    }
                /*Rule-2*/
                    else if (proba != 3 && proba != 6) {

                        array[i][j] = 0; proba = 0;
                    }
                    // }
                }
                /*Rule-3*/
                proba = 0;
                if (array2[i][j] == 2) {
                    /*cross*/
                       // if ((i - 1) >= 0 && (j - 1) >= 0 && (j + 1) <= (1-y) && (i + 1) <= (x-1)) {
                    if (array2[i - 1][j] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j] == 2) {
                        proba++;
                    }
                    if (array2[i][j - 1] == 2) {
                        proba++;
                    }
                    if (array2[i][j + 1] == 2) {
                        proba++;
                    }
                    /*diag*/
                    if (array2[i - 1][j - 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j - 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i - 1][j + 1] == 2)
                    {
                        proba++;
                    }
                    if (array2[i + 1][j + 1] == 2)
                    {
                        proba++;
                    }
                    /*final*/
                    if (proba != 2 && proba != 3 && proba != 6)
                    {
                        array[i][j] = 0;
                    }
                /*Rule-4*/
                    else if (proba == 2 || proba == 3 || proba == 6) {
                        array[i][j] = 2; proba = 0;
                    }

                    // }
                }

            }
        }

        /*Arr2=Arr1*/
        for (int k = 0; k < x; k++) {
            for (int l = 0; l < y; l++) {
                array2[k][l] = array[k][l];
            }
        }
        /*Green score sum*/
        if (array2[1][0] == 2) { sum++; }
    }
    cout << endl << "-" << array[1][0] << "-" << endl;
    return 0;
}

int main()
{
    cout << "You are playing Green vs Red! Choice your grid lenght" << endl;
    cout << "insert number x:" << endl;
    cin >> x;
    cout << "insert number y:" << endl;
    cin >> y;
    /*Checking the constant variables. Minimal field is 3x3 by default*/
    while (!(3 <= x && x <= y && y < 1001)) {
        cout << "insert number x:" << endl;
        cin >> x;
        cout << "insert number y:" << endl;
        cin >> y;
    }
    cout << "Insert the number of next generations:" << endl;
    cin >> N;
    while (!(N > 0)) {
        cin >> N;
    }
    cout << "Grid: " << x << "x" << y << endl << endl;

    genZero();

    genNext();

 cout << "1, 0, " << N << endl;
 cout << "Expected result: Green count " << sum << endl;
}
