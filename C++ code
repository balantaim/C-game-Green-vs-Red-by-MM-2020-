
// Solution (MM 2020).cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>


using namespace std;
int x,y,sum=0, c = 0, N, green = 1, red = 0;

void genZero()
{
    for (int hor=0; hor < x; hor++) {

        

        for (int col=0; col < y; col++) {
            if (hor % 2 == 0) {
                cout << red;
            }
            else { cout << green; }
            if ((hor == 1 && col == 0)) { }
        }
       
        cout << endl;
    }
}


int genNew()
{
    int c=0;
    int array[10][10];
    for (int i = 0; i < x; i++)
    {
        for (int j = 0; j < y; j++)
        {
            if (i % 2 == 0) {
                array[i][j] = { 0 };
            }
            else { array[i][j] = { 1 }; }
        }
    }
    return (c);
}

int main()
{

    cout << "You are playing Green vs Red! Choice your grid lenght" << endl;
    cout << "insert number x:" << endl;
    cin >> x;
    cout << "insert number y:" << endl;
    cin >> y;

    while (!(3 <= x && x <= y && y < 1000)) {
        cout << "insert number x:" << endl;
        cin >> x;
        cout << "insert number y:" << endl;
        cin >> y;
    }
    cout << "Insert the number of next generations:" << endl;
    cin >> N;
    while (!(N > 0)) {
        cin >> N;
    }
    cout << "Grid: " << x << "x" << y << endl;

    genZero();


    int array[10][10];
    for (int gener = 0; gener < N; gener++)
    {
        for (int i = 0; i < x; i++)
        {
            for (int j = 0; j < y; j++)
            {
                /*Starting pattern*/
                if (gener == 0) {
                    if (i % 2 == 0) {
                        array[i][j] = { 0 };
                    }
                    else { array[i][j] = { 1 }; }
                }

                /*Generation rules*/

                int proba = 0;
                /*1*/
                /*cross*/
                if (array[i][j] == 0) {
                    if (i - 1 >= x) {
                        if (array[i - 1][j] == 1)
                        {
                            proba++;
                        }
                    }
                    if (i + 1 <= x) {
                        if (array[i + 1][j] == 1) {
                            proba++;
                        }
                    }
                    if (j - 1 >= y) {
                        if (array[i][j - 1] == 1) {
                            proba++;
                        }
                    }
                    if (j + 1 <= y) {
                        if (array[i][j + 1] == 1) {
                            proba++;
                        }
                    }
                    /*diag*/
                    if (array[i - 1][j - 1] == 0) {
                        if (i - 1 >= 0) {
                            if (array[i - 1][j] == 1)
                            {
                                proba++;
                            }
                        }
                        if (i + 1 <= x) {
                            if (array[i + 1][j] == 1) {
                                proba++;
                            }
                        }
                        if (j - 1 >= 0) {
                            if (array[i][j - 1] == 1) {
                                proba++;
                            }
                        }
                        if (j + 1 <= y) {
                            if (array[i][j + 1] == 1) {
                                proba++;
                            }
                        }

                        if (proba == 3 || 6) {
                            array[i][j] = 1;
                        }
                    }
                    /*2*/
                    proba = 0;
                    if (array[i][j] == 0) {
                        if (array[i - 1][j] == 1)
                        {
                            proba++;
                        }
                        if (array[i + 1][j] == 1) {
                            proba++;
                        }
                        if (array[i][j - 1] == 1) {
                            proba++;
                        }
                        if (array[i + 1][j + 1] == 1) {
                            proba++;
                        }
                        if (!(proba == 3 || 6)) {
                            array[i][j] = 0;
                        }
                    }
                    /*3*/
                    proba = 0;
                    if (array[i][j] == 1) {
                        if (array[i - 1][j] == 1)
                        {
                            proba++;
                        }
                        if (array[i + 1][j] == 1) {
                            proba++;
                        }
                        if (array[i][j - 1] == 1) {
                            proba++;
                        }
                        if (array[i + 1][j + 1] == 1) {
                            proba++;
                        }
                        if ((proba == 2 || 3 || 6)) {
                            array[i][j] = 0;
                        }
                    }
                    /*4*/
                    proba = 0;
                    if (array[i][j] == 1) {
                        if (array[i - 1][j] == 1)
                        {
                            proba++;
                        }
                        if (array[i + 1][j] == 1) {
                            proba++;
                        }
                        if (array[i][j - 1] == 1) {
                            proba++;
                        }
                        if (array[i + 1][j + 1] == 1) {
                            proba++;
                        }
                        if (!(proba == 2 || 3 || 6)) {
                            array[i][j] = 1;
                        }
                    }

                }
            }
        }
        /*Green score sum*/
        if (array[1][0] == 1) { sum++; }

    }
        cout << array[1][0] << endl;



        cout << "1, 0, " << N << endl;
        cout << "Expected result: Green count " << sum << endl;



    

}
